- clearindex = 1;
.container
    style.
        h4{
            margin-top:30px;
            margin-bottom:0px;
        }
        .fill{
            width:100%;
            margin-top:10px;
        }
        .state{
            color:#666;
        }
    if this.client.state != "connected"
        .alert.alert-warning= this.client.state=="connecting"?"Verbinung wird hergestellt...":"Verbindung verloren. Erneut verbinden in "+this.client.timeUntilReconnect+"s..."
    .row
        .col-sm-3.col-xs-12        
            if client.hasPermission("officelight")
                h4 Büro Lampen
                each scene in this.client.devices.officelight.state.scenes
                    .fill.btn-group(style="display:flex")
                        .btn.btn-default(onClick=this.setScene(scene.id) style="flex:1")= scene.name
                        .btn.btn-default(onClick=this.deleteScene(scene.id))
                            i.glyphicon.glyphicon-remove
                .fill.btn.btn-primary(onClick=this.createScene.bind(this)) Neue Scene
                if this.state.createscene
                    Modal
                        .modal-header
                            h2 Scene erstellen
                        .modal-body
                            .form-horizontal
                                .form-group
                                    label.col-lg-2.control-label Name
                                    .col-lg-10
                                        input.form-control(type="text" value=this.state.createscene.name onChange=this.validateCreateSceneName.bind(this))
                        .modal-footer
                            .btn.btn-default(onClick=this.cancelCreateScene.bind(this)) Abbrechen
                            .btn.btn-primary(onClick=this.confirmCreateScene.bind(this)) Erfassen
        .col-sm-9.col-xs-12
            .row
                if client.hasPermission("mainlight")                
                    .col-sm-4.col-xs-12
                        - var state = this.client.devices.mainlight.state.status;
                        h4.pull-left Lager Licht
                        h4.state.pull-right= state||"Unbekannt"
                        .fill.btn.btn-primary(onClick=this.mainlightOn.bind(this) disabled=state=="on") Voll
                        .fill.btn.btn-primary(onClick=this.mainlightHalfOn.bind(this) disabled=state=="half") Halb
                        .fill.btn.btn-primary(onClick=this.mainlightOff.bind(this) disabled=state=="off") Aus
                    +clear(1)
                if client.hasPermission("workshoplight")
                    .col-sm-4.col-xs-12
                        - var on = this.client.devices.workshoplight.state.on;               
                        h4.pull-left Werkstattlicht
                        h4.state.pull-right= on!==undefined?(on?"on":"off"):"Unbekannt"
                        .fill.btn.btn-primary(onClick=this.workshopOn.bind(this) disabled=on===true) An
                        .fill.btn.btn-primary(onClick=this.workshopOff.bind(this) disabled=on===false) Aus
                    +clear(1)
                if client.hasPermission("outdoorlight")                
                    .col-sm-4.col-xs-12
                        - var state = this.client.devices.outdoorlight.state.status
                        h4.pull-left Aussenlicht
                        h4.state.pull-right= state
                        .fill.btn.btn-primary(onClick=this.outdoorlightOn.bind(this) disabled=state=="on") An
                        .fill.btn.btn-primary(onClick=this.outdoorlightOff.bind(this) disabled=state=="off") Aus
                    +clear(1)
                if client.hasPermission("shutters")
                    .col-sm-4.col-xs-12
                        - var state = this.client.devices.shutters.state.status
                        h4.pull-left Storen
                        h4.state.pull-right= state||"Unbekannt"
                        .fill.btn.btn-success(onClick=this.shuttersUp.bind(this) disabled=state=="movingup") Hoch
                        .fill.btn.btn-success(onClick=this.shuttersDown.bind(this) disabled=state=="movingdown") Runter
                        .fill.btn.btn-success(onClick=this.shuttersStop.bind(this) disabled=state=="stopped") Stop
                        .fill.btn.btn-success(onClick=this.shuttersTilt.bind(this)) Gekippt
                    +clear(1)
                if client.hasPermission("gate")               
                    .col-sm-4.col-xs-12
                        - var state = this.client.devices.gate.state.state
                        h4.pull-left Rolltor
                        h4.state.pull-right= state||"Unbekannt"
                        .fill.btn.btn-success(onClick=this.gateOpen.bind(this) disabled=state=="opening") Öffnen
                        .fill.btn.btn-success(onClick=this.gateClose.bind(this) disabled=state=="closing") Schliessen
                        .fill.btn.btn-success(onClick=this.gateStop.bind(this) disabled=(state=="closed"||state=="open"||state=="stopped")) Stoppen
                    +clear(1)
                if client.hasPermissions("outerdoor") || client.hasPermissions("innerdoor")                        
                    .col-sm-4.col-xs-12
                        if client.hasPermissions("outerdoor")
                            -var state = this.client.devices.outerdoor.state;
                            h4.pull-left Aussentür
                            h4.state.pull-right=state.open?"offen":"zu"
                            .fill.btn.btn-success(onClick=this.outerdoorLock.bind(this) disabled=state.locked) Verriegeln
                            .fill.btn.btn-success(onClick=this.outerdoorUnlock.bind(this) disabled=!state.locked) Entriegeln
                
                        if client.hasPermissions("innerdoor")
                            -var state = this.client.devices.innerdoor.state;
                            h4.pull-left Innentür
                            h4.state.pull-right=state.open?"offen":"zu"
                            .fill.btn.btn-success(onClick=this.innerdoorLock.bind(this) disabled=state.locked) Verriegeln
                            .fill.btn.btn-success(onClick=this.innerdoorUnlock.bind(this) disabled=!state.locked) Entriegeln
                if client.hasPermission("sonos")
                    .col-sm-4.col-xs-12
                        h4 Sonos
                        .fill.btn.btn-warning(onClick=this.sonosPlay.bind(this)) Play
                        .fill.btn.btn-warning(onClick=this.sonosPause.bind(this)) Stop
                if client.hasPermissions("alloff")
                    .col-sm-4.col-xs-12
                        h4 Go Home
                        .fill.btn.btn-danger(onClick=this.goHome.bind(this)) Go Home
                            
mixin clear(a)
    if (clearindex++)%3==0
        .clearfix.visible-lg.visible-md.visible-sm
    .clearfix.visible-xs        
script.
    var DeviceClient = require("../client/index");
    var client = require("require")("boxify/lib/client.js");
    var Modal = require("require")("boxify/lib/views/Modal.js");
    var clearindex = 0;
script(section="body").
    constructor(props,context){
        super(props,context);
        this.state = {};
    }
    componentWillMount(){
        this.client = new DeviceClient();
        this.client.on("change",function(){
            this.forceUpdate();
        }.bind(this))
        this.client.listen();
    }
    
    componentWillUnmount(){
        if(this.client) this.client.disconnect();
    }
    
    mainlightOn(){
        this.client.devices.mainlight.turnOn();
    }
    mainlightHalfOn(){
        this.client.devices.mainlight.turnHalfOn();
    }
    mainlightOff(){
        this.client.devices.mainlight.turnOff();
    }
    
    shuttersUp(){
        this.client.devices.shutters.moveUp();
    }
    
    shuttersDown(){
        this.client.devices.shutters.moveDown();
    }
    
    shuttersStop(){
        this.client.devices.shutters.stop();
    }
    
    shuttersTilt(){
        this.client.devices.shutters.tilt();
    }
    
    gateOpen(){
        this.client.devices.gate.open();
    }
    
    gateClose(){
        this.client.devices.gate.close();
    }
    
    gateStop(){
        this.client.devices.gate.stop();
    }
    
    createScene(){
        this.state.createscene = {name:""};
        this.forceUpdate();
    }
    validateCreateSceneName(e){
        this.state.createscene.name = e.target.value;
        this.forceUpdate();
    }
    cancelCreateScene(){
        delete this.state.createscene;
        this.forceUpdate();
    }
    confirmCreateScene(){
        var name = this.state.createscene.name;
        delete this.state.createscene;
        this.forceUpdate();
        this.client.devices.officelight.createScene(name);
    }
    
    setScene(id){
        return function(){
            this.client.devices.officelight.setScene(id);
        }.bind(this)
    }
    
    deleteScene(id){
        return function(){
            this.client.devices.officelight.deleteScene(id);
        }.bind(this)
    }    
    
    workshopOn(){
        this.client.devices.workshoplight.turnOn();
    }
    
    workshopOff(){
        this.client.devices.workshoplight.turnOff();
    }
    
    sonosPlay(){
        this.client.devices.sonos.play();
    }
    
    sonosPause(){
        this.client.devices.sonos.pause();
    }
    
    outdoorlightOn(){
        this.client.devices.outdoorlight.turnOn();
    }
    
    outdoorlightOff(){
        this.client.devices.outdoorlight.turnOff();
    }
    
    outerdoorUnlock(){
        this.client.devices.outerdoor.setAutoLock(false);
    }
    
    outerdoorLock(){
        this.client.devices.outerdoor.setAutoLock(true);
    }
        
    innerdoorUnlock(){
        this.client.devices.innerdoor.setAutoLock(false);
    }
    
    innerdoorLock (){
        this.client.devices.innerdoor.setAutoLock(true);
    }
    
    goHome(){
        this.mainlightOff();
        this.workshopOff();
        this.outdoorlightOff();
        this.outerdoorLock();
        this.innerdoorLock();
        this.sonosPause();
        this.client.devices.officelight.setSceneByName("Aus");
    }
