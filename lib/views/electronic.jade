extends ../../../../lib/views/base.jade

append body
    .container
        if this.client.state != "connected"
            .alert.alert-warning= this.client.state=="connecting"?"Verbinung wird hergestellt...":"Verbindung verloren. Erneut verbinden in "+this.client.timeUntilReconnect+"s..."
        if client.hasPermission("mainlight")
            .row
                h4 Lager Licht
                .col-xs-6
                    .btn-toolbar
                        button.btn.btn-default(onClick=this.mainlightOn) Voll
                        button.btn.btn-default(onClick=this.mainlightHalfOn) Halb
                        button.btn.btn-default(onClick=this.mainlightOff) Aus
                .col-xs-6
                    span= this.client.devices.mainlight.state.status||"Unbekannt"
                    
        if client.hasPermission("shutters")
            .row
                h4 Storen
                .col-xs-6
                    .btn-toolbar
                        button.btn.btn-default(onClick=this.shuttersUp) Hoch
                        button.btn.btn-default(onClick=this.shuttersDown) Runter
                        button.btn.btn-default(onClick=this.shuttersStop) Stop
                        button.btn.btn-default(onClick=this.shuttersTilt) Gekippt
                .col-xs-6
                    span= this.client.devices.shutters.state.status||"Unbekannt"
        if client.hasPermission("gate")
            .row
                h4 Rolltor
                .col-xs-6
                    .btn-toolbar
                        button.btn.btn-default(onClick=this.gateOpen) Öffnen
                        button.btn.btn-default(onClick=this.gateClose) Schliessen
                        button.btn.btn-default(onClick=this.gateStop) Stoppen
                .col-xs-6
                    span= this.client.devices.gate.state.state||"Unbekannt"
        if client.hasPermission("officelight")
            .row
                h4 Büro Lampen
                .col-xs-12
                    .btn-toolbar
                        each scene in this.client.devices.officelight.state.scenes
                            .btn-group
                                button.btn.btn-default(onClick=this.setScene(scene.id))= scene.name
                                button.btn.btn-default(onClick=this.deleteScene(scene.id))
                                    i.glyphicon.glyphicon-remove
                        button.btn.btn-primary(onClick=this.createScene) Neue Scene
            if this.props.createscene
                .modal(style="display:block").fade.in
                    .modal-backdrop(style="bottom:0px;display:block").fade.in
                    .modal-dialog
                        .modal-content
                            .modal-header
                                h2 Scene erstellen
                            .modal-body
                                .form-horizontal
                                    .form-group
                                        label.col-lg-2.control-label Name
                                        .col-lg-10
                                            input.form-control(type="text" value=this.props.createscene.name onChange=this.validateCreateSceneName.bind(this))
                            .modal-footer
                                button.btn.btn-default(onClick=this.cancelCreateScene) Abbrechen
                                button.btn.btn-primary(onClick=this.confirmCreateScene) Erfassen
        if client.hasPermission("workshoplight")
            .row
                h4 Werkstattlicht
                .col-xs-6
                    .btn-toolbar
                        .btn.btn-default(onClick=this.workshopOn) An
                        .btn.btn-default(onClick=this.workshopOff) Aus
                .col-xs-6
                    span= this.client.devices.workshoplight.state.on?"on":"off"
        if client.hasPermission("outdoorlight")
            .row
                h4 Aussenlicht
                .col-xs-6
                    .btn-toolbar
                        .btn.btn-default(onClick=this.outdoorlightOn) An
                        .btn.btn-default(onClick=this.outdoorlightOff) Aus
                .col-xs-6
                    span= this.client.devices.outdoorlight.state.status
        if client.hasPermission("sonos")
            .row
                h4 Sonos
                .col-xs-12
                    .btn-toolbar
                        .btn.btn-default(onClick=this.sonosPlay) Play
                        .btn.btn-default(onClick=this.sonosPause) Stop
        if client.hasPermission("tictactoe")
            .row
                h4 Super geheime Geheimfunktion
                .btn.btn-danger(onClick=this.startTicTacToe) Diesen Button unter keinen Umständen drücken!
script.
    var DeviceClient = require("../client/index.js");
    var client = require("boxify/lib/client.js");
    
    exports.componentWillMount = function(){
        this.client = new DeviceClient();
        this.client.on("change",function(){
            this.update();
        }.bind(this))
        this.client.listen();
    }
    
    exports.componentWillUnmount = function(){
        if(this.client) this.client.disconnect();
    }
    
    exports.getNeededPermissions = function(){
        return [];
    }
    
    exports.mainlightOn = function(){
        this.client.devices.mainlight.turnOn();
    }
    exports.mainlightHalfOn = function(){
        this.client.devices.mainlight.turnHalfOn();
    }
    exports.mainlightOff = function(){
        this.client.devices.mainlight.turnOff();
    }
    
    exports.shuttersUp = function(){
        this.client.devices.shutters.moveUp();
    }
    
    exports.shuttersDown = function(){
        this.client.devices.shutters.moveDown();
    }
    
    exports.shuttersStop = function(){
        this.client.devices.shutters.stop();
    }
    
    exports.shuttersTilt = function(){
        this.client.devices.shutters.tilt();
    }
    
    exports.gateOpen = function(){
        this.client.devices.gate.open();
    }
    
    exports.gateClose = function(){
        this.client.devices.gate.close();
    }
    
    exports.gateStop = function(){
        this.client.devices.gate.stop();
    }
    
    exports.createScene = function(){
        this.props.createscene = {name:""};
        this.update();
    }
    exports.validateCreateSceneName = function(e){
        this.props.createscene.name = e.target.value;
        this.update();
    }
    exports.cancelCreateScene = function(){
        delete this.props.createscene;
        this.update();
    }
    exports.confirmCreateScene = function(){
        var name = this.props.createscene.name;
        delete this.props.createscene;
        this.update();
        this.client.devices.officelight.createScene(name);
    }
    
    exports.setScene = function(id){
        return function(){
            this.client.devices.officelight.setScene(id);
        }.bind(this)
    }
    
    exports.deleteScene = function(id){
        return function(){
            this.client.devices.officelight.deleteScene(id);
        }.bind(this)
    }    
    
    exports.workshopOn = function(){
        this.client.devices.workshoplight.turnOn();
    }
    
    exports.workshopOff = function(){
        this.client.devices.workshoplight.turnOff();
    }
    
    exports.sonosPlay = function(){
        this.client.devices.sonos.play();
    }
    
    exports.sonosPause = function(){
        this.client.devices.sonos.pause();
    }
    
    exports.startTicTacToe = function(){
        visit("/tictactoe");
    }
    
    exports.outdoorlightOn = function(){
        this.client.devices.outdoorlight.turnOn();
    }
    
    exports.outdoorlightOff = function(){
        this.client.devices.outdoorlight.turnOff();
    }
