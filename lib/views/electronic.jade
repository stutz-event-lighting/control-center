extends boxify/lib/views/base.jade

append body
    - clearindex = 1;
    style.
        h4{
            margin-top:30px;
            margin-bottom:0px;
        }
        .fill{
            width:100%;
            margin-top:10px;
        }
        .state{
            color:#666;
        }
    .container
        if this.client.state != "connected"
            .alert.alert-warning= this.client.state=="connecting"?"Verbinung wird hergestellt...":"Verbindung verloren. Erneut verbinden in "+this.client.timeUntilReconnect+"s..."
        .row
            .col-sm-3.col-xs-12        
                if client.hasPermission("officelight")
                    h4 Büro Lampen
                    each scene in this.client.devices.officelight.state.scenes
                        .fill.btn-group(style="display:flex")
                            .btn.btn-default(onClick=this.setScene(scene.id) style="flex:1")= scene.name
                            .btn.btn-default(onClick=this.deleteScene(scene.id))
                                i.glyphicon.glyphicon-remove
                    .fill.btn.btn-primary(onClick=this.createScene) Neue Scene
                    if this.state.createscene
                        .modal-backdrop(style="bottom:0px;display:block").fade.in
                        .modal(style="display:block").fade.in
                            .modal-dialog
                                .modal-content
                                    .modal-header
                                        h2 Scene erstellen
                                    .modal-body
                                        .form-horizontal
                                            .form-group
                                                label.col-lg-2.control-label Name
                                                .col-lg-10
                                                    input.form-control(type="text" value=this.state.createscene.name onChange=this.validateCreateSceneName.bind(this))
                                    .modal-footer
                                        .btn.btn-default(onClick=this.cancelCreateScene) Abbrechen
                                        .btn.btn-primary(onClick=this.confirmCreateScene) Erfassen
            .col-sm-9.col-xs-12
                .row
                    if client.hasPermission("mainlight")                
                        .col-sm-4.col-xs-12
                            - var state = this.client.devices.mainlight.state.status;
                            h4.pull-left Lager Licht
                            h4.state.pull-right= state||"Unbekannt"
                            .fill.btn.btn-primary(onClick=this.mainlightOn disabled=state=="on") Voll
                            .fill.btn.btn-primary(onClick=this.mainlightHalfOn disabled=state=="half") Halb
                            .fill.btn.btn-primary(onClick=this.mainlightOff disabled=state=="off") Aus
                        +clear(1)
                    if client.hasPermission("workshoplight")
                        .col-sm-4.col-xs-12
                            - var on = this.client.devices.workshoplight.state.on;               
                            h4.pull-left Werkstattlicht
                            h4.state.pull-right= on!==undefined?(on?"on":"off"):"Unbekannt"
                            .fill.btn.btn-primary(onClick=this.workshopOn disabled=on===true) An
                            .fill.btn.btn-primary(onClick=this.workshopOff disabled=on===false) Aus
                        +clear(1)
                    if client.hasPermission("outdoorlight")                
                        .col-sm-4.col-xs-12
                            - var state = this.client.devices.outdoorlight.state.status
                            h4.pull-left Aussenlicht
                            h4.state.pull-right= state
                            .fill.btn.btn-primary(onClick=this.outdoorlightOn disabled=state=="on") An
                            .fill.btn.btn-primary(onClick=this.outdoorlightOff disabled=state=="off") Aus
                        +clear(1)
                    if client.hasPermission("shutters")
                        .col-sm-4.col-xs-12
                            - var state = this.client.devices.shutters.state.status
                            h4.pull-left Storen
                            h4.state.pull-right= state||"Unbekannt"
                            .fill.btn.btn-success(onClick=this.shuttersUp disabled=state=="movingup") Hoch
                            .fill.btn.btn-success(onClick=this.shuttersDown disabled=state=="movingdown") Runter
                            .fill.btn.btn-success(onClick=this.shuttersStop disabled=state=="stopped") Stop
                            .fill.btn.btn-success(onClick=this.shuttersTilt) Gekippt
                        +clear(1)
                    if client.hasPermission("gate")               
                        .col-sm-4.col-xs-12
                            - var state = this.client.devices.gate.state.state
                            h4.pull-left Rolltor
                            h4.state.pull-right= state||"Unbekannt"
                            .fill.btn.btn-success(onClick=this.gateOpen disabled=state=="opening") Öffnen
                            .fill.btn.btn-success(onClick=this.gateClose disabled=state=="closing") Schliessen
                            .fill.btn.btn-success(onClick=this.gateStop disabled=(state=="closed"||state=="open"||state=="stopped")) Stoppen
                        +clear(1)  
                    if client.hasPermission("sonos")
                        .col-sm-4.col-xs-12
                            h4 Sonos
                            .fill.btn.btn-warning(onClick=this.sonosPlay) Play
                            .fill.btn.btn-warning(onClick=this.sonosPause) Stop
                        +clear(1)
                    if client.hasPermissions("alloff")
                        .col-sm-4.col-xs-12
                            h4 Go Home
                            .fill.btn.btn-danger(onClick=this.goHome) Go Home
                            
mixin clear(a)
    if (clearindex++)%3==0
        .clearfix.visible-lg.visible-md.visible-sm
    .clearfix.visible-xs        
script.
    var DeviceClient = require("../client/index.js");
    var client = require("boxify/lib/client.js");
    var clearindex = 0;
    
    exports.componentWillMount = function(){
        this.client = new DeviceClient();
        this.client.on("change",function(){
            this.update();
        }.bind(this))
        this.client.listen();
    }
    
    exports.componentWillUnmount = function(){
        if(this.client) this.client.disconnect();
    }
    
    exports.getNeededPermissions = function(){
        return [];
    }
    
    exports.mainlightOn = function(){
        this.client.devices.mainlight.turnOn();
    }
    exports.mainlightHalfOn = function(){
        this.client.devices.mainlight.turnHalfOn();
    }
    exports.mainlightOff = function(){
        this.client.devices.mainlight.turnOff();
    }
    
    exports.shuttersUp = function(){
        this.client.devices.shutters.moveUp();
    }
    
    exports.shuttersDown = function(){
        this.client.devices.shutters.moveDown();
    }
    
    exports.shuttersStop = function(){
        this.client.devices.shutters.stop();
    }
    
    exports.shuttersTilt = function(){
        this.client.devices.shutters.tilt();
    }
    
    exports.gateOpen = function(){
        this.client.devices.gate.open();
    }
    
    exports.gateClose = function(){
        this.client.devices.gate.close();
    }
    
    exports.gateStop = function(){
        this.client.devices.gate.stop();
    }
    
    exports.createScene = function(){
        this.state.createscene = {name:""};
        this.update();
    }
    exports.validateCreateSceneName = function(e){
        this.state.createscene.name = e.target.value;
        this.update();
    }
    exports.cancelCreateScene = function(){
        delete this.state.createscene;
        this.update();
    }
    exports.confirmCreateScene = function(){
        var name = this.state.createscene.name;
        delete this.state.createscene;
        this.update();
        this.client.devices.officelight.createScene(name);
    }
    
    exports.setScene = function(id){
        return function(){
            this.client.devices.officelight.setScene(id);
        }.bind(this)
    }
    
    exports.deleteScene = function(id){
        return function(){
            this.client.devices.officelight.deleteScene(id);
        }.bind(this)
    }    
    
    exports.workshopOn = function(){
        this.client.devices.workshoplight.turnOn();
    }
    
    exports.workshopOff = function(){
        this.client.devices.workshoplight.turnOff();
    }
    
    exports.sonosPlay = function(){
        this.client.devices.sonos.play();
    }
    
    exports.sonosPause = function(){
        this.client.devices.sonos.pause();
    }
    
    exports.startTicTacToe = function(){
        visit("/tictactoe");
    }
    
    exports.outdoorlightOn = function(){
        this.client.devices.outdoorlight.turnOn();
    }
    
    exports.outdoorlightOff = function(){
        this.client.devices.outdoorlight.turnOff();
    }
    
    exports.goHome = function(){
        this.client.devices.alloff.off();
    }
